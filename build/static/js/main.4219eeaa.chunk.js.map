{"version":3,"sources":["components/Robot.js","components/Main.js","App.js","serviceWorker.js","index.js","assets/json/robotInfo.js"],"names":["Robot","props","tasks","robotName","robotTypeSelector","react_default","a","createElement","className","map","bot","botIndex","buttonInfo","concat","id","description","oldSec","newSeconds","convertToSeconds","eta","onClick","name","index","buttonProperties","document","getElementById","style","display","setTimeout","classList","add","timeoutHandler","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","robotSubmitHandler","event","_this$refs","refs","robotError","preventDefault","botName","value","botType","errorMsg","length","innerHTML","randomTasks","x","randomNumber","Math","floor","random","robotTasks","push","newBot","setState","robots","toConsumableArray","state","test","React","createRef","onSubmit","htmlFor","type","ref","placeholder","components_Robot","key","Component","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","robotTypes","UNIPEDAL","BIPEDAL","QUADRUPEDAL","ARACHNID","RADIAL","AERONAUTICAL"],"mappings":"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","file":"static/js/main.4219eeaa.chunk.js","sourcesContent":["import React from 'react';\nconst Robot = (props) => {\n    const { tasks, robotName, robotTypeSelector } = props;//DESTRUCTURING VALUES INSIDE PROPS OBJECT\n\n    const convertToSeconds = (oldSec) => {\n        const newSeconds = oldSec / 1000;//CONVERTING MILLISECONDS TO SECONDS\n        if (oldSec === 1000) {\n            return `${newSeconds} second`;\n        } else {\n            return `${newSeconds} seconds`;\n        }\n        /* CHECKS IF ITS ONE SECOND OR NOT BECAUSE IF IT DOES IT WILL ONLY SAY \"SECOND\" */\n    };\n\n    const timeoutHandler = (name, index, eta) => {\n        const buttonProperties = `${name}-${index}`;//MAKING A SHORTCUT STRING FOR ID NAMES\n\n        document.getElementById(`${buttonProperties}-button`).style.display = \"none\";\n        document.getElementById(`${buttonProperties}-loading`).style.display = \"block\";//MAKING THE BUTTON DISSAPEAR AND MAKING THE LOADING SVG APPEAR UNTIL IT IS FINISHED\n\n        setTimeout(() => {//DOING A setTimeout AFTER THE BUTTON IS CLICKED\n            document.getElementById(`${buttonProperties}-loading`).style.display = \"none\";\n            document.getElementById(`${buttonProperties}-completed`).style.display = \"block\";\n            document.getElementById(`${buttonProperties}-list__item`).classList.add('removeTask');\n        }, eta)//setTimeout runs a callback function (FIRST PARAMETER) after the time (SECOND PARAMETER) is completed\n    };\n\n\n    return (\n        <div className=\"robot boxshadow--white\">\n            <h2 className=\"robot__name\">{robotName}</h2>\n            <p className=\"robot__type\">Bot Type: {robotTypeSelector}</p>\n            <div>\n                <ul className=\"task__list\">\n                    {tasks.map((bot, botIndex) => {\n                        const buttonInfo = `${robotName}-${botIndex}`;//MAKING A SHORTCUT STRING FOR THE LIST ITEMS ID's\n                        return (\n                            <li className=\"task__list__item\" id={`${buttonInfo}-list__item`}>\n                                <p className=\"task__list__description\">{bot.description}</p>\n                                <p className=\"task__list__time\">ETA: {convertToSeconds(bot.eta)}</p>\n                                <div className=\"task__list__timer\">\n                                    <button className=\"task__list__button\"\n                                        id={`${buttonInfo}-button`}\n                                        onClick={() => timeoutHandler(robotName, botIndex, bot.eta)}>complete</button>\n                                    <div className=\"task__list__loading\" id={`${buttonInfo}-loading`}></div>\n                                    <div className=\"task__list__completed\" id={`${buttonInfo}-completed`}></div>\n                                    {/* THREE ELEMENTS INSIDE ONE DIV THAT ARE BEING DISPLAY NONE/BLOCK WHEN NEEDED */}\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n};\n\nexport default Robot;","import React, { Component } from 'react';\nimport Robot from \"./Robot\";\nimport { robotTasks } from \"../assets/json/robotInfo\";\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.test = React.createRef();\n        this.state = {\n            robots: [],//EMPTY ARRAY FOR ROBOTS THAT IM GOING TO ADD TO AND MAP OUT\n            randomTasks: [],//EMPTY ARRAY FOR TASKS THAT IM GOING TO ADD TO AND SEND TO THE ROBOTS AS PROPS\n\n        }\n    }\n\n    robotSubmitHandler = (event) => {\n        const {robotName, robotTypeSelector, robotError} = this.refs;\n        event.preventDefault();\n        const botName = robotName.value\n        const botType = robotTypeSelector.value\n        // When you use refs, you get the node rendered by this component, and you can re-use your component as much as you want.\n        let errorMsg = robotError;\n        if(botName.length === 0 && botType === 'default'){\n            errorMsg.innerHTML = \"PLEASE ENTER A VALID NAME AND SELECT A ROBOT TYPE\";\n        }\n        else if(botName.length === 0 ){\n           errorMsg.innerHTML = \"PLEASE ENTER A VALID NAME\"\n        }else if(botType === 'default'){\n            errorMsg.innerHTML= \"PLEASE SELECT A ROBOT TYPE\"\n        }\n        /* CHECKS IF A NAME AND TYPE IS EVEN ENTERED, IF SO CONTINUE AND ADDS BOT */\n        else{\n            errorMsg.innerHTML = \"\";\n        let randomTasks = [];\n        for (let x = 0; x < 5; x++) {\n            const randomNumber = Math.floor(Math.random() * robotTasks.length);\n            randomTasks.push(robotTasks[randomNumber])\n        };\n        const newBot = { botName, botType, randomTasks };\n        /* REFS ALLOW YOU TO GRAB DOM NODES INSIDE THE RENDER METHOD */\n        this.setState({ robots: [...this.state.robots, newBot] });\n        /* SPREAD OPERATOR IS GRABBING A COPY OF STATE AND ALSO ADDING A NEW ARRAY */\n    };\n}\n\n    render() {\n        return (\n            <main className=\"bot__main\">\n            <section className=\"bot__main__top\">\n                <h1 className=\"bot__main__header_primary textshadow--blue\">Bot-O-Mat</h1>\n                <form onSubmit={this.robotSubmitHandler} className=\"bot__form\">\n                <label htmlFor=\"robotName\">Bot Name:</label>\n                    <input type=\"text\" name=\"robotName\" ref=\"robotName\"  id=\"robotName\" className=\"bot__form__robotname boxshadow--white\" placeholder=\"Bot Name\"/>\n                    <label htmlFor=\"robotName\">Bot Type:</label>\n                    {/* hiding labels for assesibility */}\n                    <select name=\"robotTypeSelector\" ref=\"robotTypeSelector\" id=\"robotType\" className=\"bot__form__robottype boxshadow--white\">\n                        <option value=\"default\">Select a Robot Type:</option>\n                        <option value=\"Unipedal\" >Unipedal</option>\n                        <option value=\"Bipedal\">Bipedal</option>\n                        <option value=\"Quadrupedal\">Quadrupedal</option>\n                        <option value=\"Arachnid\">Arachnid</option>\n                        <option value=\"Radial\">Radial</option>\n                        <option value=\"Aeronautical\">Aeronautical</option>\n                    </select>\n                    <input type=\"submit\" className=\"bot__form__submit\" value=\"add bot\"/>\n                </form>\n                <div className=\"bot__form__error\" ref=\"robotError\"></div>\n                </section>\n                <div className=\"robot__container\">\n                    {this.state.robots.map((bot, index) => {\n                        /* .map() METHOD TAKES A ARRAY AND GENERATES A NEW ARRAY WITH PROPERTIES\n                        IM RETURNING A NEW ARRAY THEN RETURNING A NEW COMPONENT THE PROPS EQUAL TO THE CONTENTS OF THE ARRAY\n                        */\n                        return (\n                            <Robot\n                                key={index}\n                                robotName={bot.botName}\n                                robotTypeSelector={bot.botType}\n                                tasks={bot.randomTasks}\n                            />\n                        )\n                    })}\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport \"./App.scss\";\nimport Main from \"./components/Main\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    //  robotTasks, robotTasks\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Main/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const robotTasks = [\n    {\n        description: 'do the dishes',\n        eta: 1000,\n    }, {\n        description: 'sweep the house',\n        eta: 3000,\n    }, {\n        description: 'do the laundry',\n        eta: 10000,\n    }, {\n        description: 'take out the recycling',\n        eta: 4000,\n    }, {\n        description: 'make a sammich',\n        eta: 7000,\n    }, {\n        description: 'mow the lawn',\n        eta: 20000,\n    }, {\n        description: 'rake the leaves',\n        eta: 18000,\n    }, {\n        description: 'give the dog a bath',\n        eta: 14500,\n    }, {\n        description: 'bake some cookies',\n        eta: 8000,\n    }, {\n        description: 'wash the car',\n        eta: 20000,\n    }\n];\n\nconst robotTypes = [\n    {\n        UNIPEDAL: 'Unipedal',\n        BIPEDAL: 'Bipedal',\n        QUADRUPEDAL: 'Quadrupedal',\n        ARACHNID: 'Arachnid',\n        RADIAL: 'Radial',\n        AERONAUTICAL: 'Aeronautical'\n    }\n];\n\nmodule.exports = { robotTasks, robotTypes }//`module.exports` is a way to export your `modules` aka, objects, functions, classes"],"sourceRoot":""}